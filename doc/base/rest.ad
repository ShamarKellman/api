=== REST API

The OpenTHC API specification follows typical REST defacto-standards.
We use the HTTP verbs in traditional ways.
Using GET or HEAD or OPTIONS to check the status of an object.
Using POST, PUT or PATCH to create or modify objects.

All responses will be in `application/json` format have at most two keys/properties.
The first is `meta` which will contain interesting information.
The second is `data` which will contain either a singular object, or an array of objects of a specific type.


==== GET & HEAD

All end-points accept a GET, and HEAD query.
For non-specific resource endpoints the GET query performs a search.

```
GET /plant
```

Would return a list of all the plant objects, or one could add a filter.

```
GET /plant?status=live&zone=BadMoterFinger
```


For specific resources, the request includes their ID, no query paramters are used.

```
GET /plant/01DC7XWCB3R3XMRMJZ2839M41E
```

For specific resources, to simply check their status use HEAD

```
HEAD /plant/01DC7XWCB3R3XMRMJZ2839M41E
```


==== POST

The POST requests are use to create or update resources

To create an object, for example, send FormData or JSON to:

```
POST /plant
```

And to update an object one would POST or PUT to that specific resource.

```
POST /plant/01DC7XWCB3R3XMRMJZ2839M41E
content-type: application/json

{ ... }
```


==== DELETE

For regulated data, the DELETE is a two step operation.
On the first request to DELETE an object, such as:

```
DELETE /plant/01DC7XWCB3R3XMRMJZ2839M41E
```

The system will respond with a `202 Accepted` level status code.
The DELETE request has been accepted.
The system must receive a **second** DELETE request to confirm, the response of `410 Gone` will confirm the removal.
Subsequent DELETE requests for the object would return `423 Locked`.

See Also: https://tools.ietf.org/html/rfc7231#section-4.3.5
